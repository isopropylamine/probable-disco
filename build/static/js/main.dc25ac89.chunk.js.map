{"version":3,"sources":["letter.js","swaps.js","App.js","reportWebVitals.js","index.js"],"names":["Letter","displayValue","glow","className","Swap","swapObject","from","to","App","CONSECUTIVE_CAPITAL_LETTERS","useState","displayArray","setDisplayArray","swaps","setSwaps","currentSwap","setCurrentSwap","sortedReference","useRef","useEffect","length","copiedArray","temporary","_","debounce","debouncedUpdateSwap","getLetterGlow","letter","JSON","stringify","current","onClick","randomArrayLength","Math","random","arraySlice","slice","shuffle","generateRandom","isEmpty","unsortedArray","sortedArray","sort","traversedUnits","Set","cycles","buffer","indexOf","getCycle","currentIndex","add","push","containerIndex","correctIndex","has","cycleSort","map","randomLetter","renderSwapsTitle","swap","getSequence","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc25ac89.chunk.js","sourcesContent":["const Letter = ({displayValue, glow}) => {\n\n  return (\n    <div className={glow ? \"letter-display glow\" : \"letter-display\"}>\n      {displayValue}\n    </div>\n  );\n};\n\nexport default Letter;\n","const Swap = ({swapObject, glow}) => {\n  return (\n    <div\n      className={glow ? \"swap-object glow\" : \"swap-object\"}\n    >{`${swapObject.from},${swapObject.to}`}</div>\n  );\n};\n\nexport default Swap;\n","import \"./App.css\";\nimport Letter from \"./letter.js\";\nimport _, { indexOf, set } from \"lodash\";\nimport * as React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Swap from \"./swaps\";\n\nconst App = () => {\n  const CONSECUTIVE_CAPITAL_LETTERS = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n  ];\n\n  const [displayArray, setDisplayArray] = useState([]);\n  const [swaps, setSwaps] = useState([]);\n  const [currentSwap, setCurrentSwap] = useState(null);\n  const sortedReference = useRef();\n\n  useEffect(() => {\n    if (currentSwap !== null && currentSwap < displayArray.length) {\n      const copiedArray = [...displayArray];\n\n      if (swaps[currentSwap]) {\n        const { to, from } = swaps[currentSwap];\n\n        const temporary = copiedArray[to];\n        copiedArray[to] = copiedArray[from];\n        copiedArray[from] = temporary;\n      }\n\n      const debouncedUpdateSwap = _.debounce(() => {\n        setDisplayArray(copiedArray);\n        setCurrentSwap(currentSwap + 1);\n      }, 1000);\n\n      debouncedUpdateSwap();\n    }\n  }, [currentSwap]);\n\n  const getLetterGlow = (letter) => {\n    if (\n      JSON.stringify(displayArray) === JSON.stringify(sortedReference.current)\n    ) {\n      return true;\n    }\n\n    if (swaps[currentSwap]) {\n      const { to, from } = swaps[currentSwap];\n\n      if (displayArray[to] === letter || displayArray[from] === letter) {\n        return true;\n      }\n    }\n  };\n\n  const generateRandom = () => {\n    // Generating a random length that provides AT LEAST 2 elements, and AT MOST 26 elements\n    const randomArrayLength = Math.random() * (26 - 2) + 2;\n    const arraySlice = CONSECUTIVE_CAPITAL_LETTERS.slice(randomArrayLength);\n    setDisplayArray(_.shuffle([...arraySlice, \"_\"]));\n    setSwaps([]);\n  };\n\n  const generateLetters = () => {\n    if (!_.isEmpty(displayArray)) {\n      return displayArray.map((randomLetter) => (\n        <Letter\n          displayValue={randomLetter}\n          glow={getLetterGlow(randomLetter)}\n        />\n      ));\n    }\n\n    return \"Generate random array, or provide sample array to start!\";\n  };\n\n  const cycleSort = (unsortedArray) => {\n    if (_.isEmpty(unsortedArray) || unsortedArray.length === 1) {\n      return unsortedArray;\n    }\n\n    //Creating a sorted array to use as a reference, javascript's built in sort is an adaptive algorithm with approximately O (n log(n)) time\n    const sortedArray = [...unsortedArray].sort();\n    sortedReference.current = sortedArray;\n\n    //Using a set to check for traversed units\n    const traversedUnits = new Set();\n    const cycles = [];\n    let buffer = indexOf(unsortedArray, \"_\");\n\n    const getCycle = () => {\n      if (buffer !== unsortedArray.length - 1) {\n        while (buffer !== unsortedArray.length - 1) {\n          let currentIndex = indexOf(unsortedArray, sortedArray[buffer]);\n          traversedUnits.add(currentIndex);\n          traversedUnits.add(buffer);\n          cycles.push({ from: currentIndex, to: buffer });\n\n          //Apply a swap for bookkeeping\n          const temporary = unsortedArray[buffer];\n          unsortedArray[buffer] = unsortedArray[currentIndex];\n          unsortedArray[currentIndex] = temporary;\n          buffer = currentIndex;\n        }\n      }\n    };\n\n    getCycle();\n\n    let containerIndex = 0;\n\n    while (containerIndex < unsortedArray.length) {\n      const correctIndex = indexOf(sortedArray, unsortedArray[containerIndex]);\n\n      if (\n        !traversedUnits.has(containerIndex) &&\n        containerIndex !== correctIndex\n      ) {\n        cycles.push({ from: containerIndex, to: buffer });\n        const temporary = unsortedArray[buffer];\n        unsortedArray[buffer] = unsortedArray[containerIndex];\n        unsortedArray[containerIndex] = temporary;\n        buffer = containerIndex;\n        getCycle();\n      }\n\n      containerIndex++;\n    }\n    setSwaps(cycles);\n    setCurrentSwap(0);\n  };\n\n  const getSequence = () => {\n    if (!_.isEmpty(swaps)) {\n      return swaps.map((swap) => (\n        <Swap swapObject={swap} glow={swaps[currentSwap] === swap} />\n      ));\n    }\n  };\n\n  const renderButton = () => {\n    if (!_.isEmpty(swaps)) {\n      if (\n        JSON.stringify(displayArray) === JSON.stringify(sortedReference.current)\n      ) {\n        return null;\n      }\n    }\n\n    return (\n      <div className=\"button\" onClick={() => cycleSort([...displayArray])}>\n        Sort array with minimum swaps\n      </div>\n    );\n  };\n\n  const renderSwapsTitle = () => {\n    if (!_.isEmpty(swaps)) {\n      if (\n        JSON.stringify(displayArray) === JSON.stringify(sortedReference.current)\n      ) {\n        return (\n          <div>\n            <h2>{`The containers were sorted in ${swaps.length} ${\n              swaps.length === 1 ? \"movement\" : \"movements\"\n            }!`}</h2>\n          </div>\n        );\n      }\n\n      return (\n        <div>\n          <h2>Swaps List:</h2>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"controls-panel\">\n        <div className=\"button\" onClick={() => generateRandom()}>\n          Generate random array\n        </div>\n        {renderButton()}\n      </div>\n\n      <div>\n        <h2>Container Array:</h2>\n      </div>\n      <div className=\"letter-container\">{generateLetters()}</div>\n      {renderSwapsTitle()}\n      <div className=\"sequence-container\">{getSequence()}</div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}